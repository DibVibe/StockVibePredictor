{
  "info": {
    "_postman_id": "stock-vibe-predictor-api",
    "name": "StockVibePredictor API",
    "description": "Comprehensive API collection for stock predictions, trading, and market analysis",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8000/api",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "üìà Prediction Endpoints",
      "item": [
        {
          "name": "Multi-Timeframe Prediction",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"ticker\": \"AAPL\",\n    \"timeframes\": [\"1d\", \"1w\", \"1mo\"],\n    \"include_analysis\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/predict/multi-timeframe/",
              "host": ["{{baseUrl}}"],
              "path": ["predict", "multi-timeframe", ""]
            },
            "description": "Advanced multi-timeframe stock prediction with comprehensive analysis"
          }
        },
        {
          "name": "Batch Predictions",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"tickers\": [\"AAPL\", \"MSFT\", \"GOOGL\"],\n    \"timeframe\": \"1d\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/predict/batch/",
              "host": ["{{baseUrl}}"],
              "path": ["predict", "batch", ""]
            },
            "description": "Batch predictions for multiple tickers"
          }
        },
        {
          "name": "Legacy Stock Trend Prediction",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"ticker\": \"TSLA\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/predict/trend/",
              "host": ["{{baseUrl}}"],
              "path": ["predict", "trend", ""]
            },
            "description": "Legacy single-timeframe prediction endpoint"
          }
        },
        {
          "name": "Prediction Service Status",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/predict/status/",
              "host": ["{{baseUrl}}"],
              "path": ["predict", "status", ""]
            },
            "description": "Get current prediction service status and performance metrics"
          }
        }
      ]
    },
    {
      "name": "ü§ñ Model Management",
      "item": [
        {
          "name": "Train Model",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"ticker\": \"AAPL\",\n    \"timeframe\": \"1d\",\n    \"model_type\": \"ensemble\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/models/train/",
              "host": ["{{baseUrl}}"],
              "path": ["models", "train", ""]
            },
            "description": "Train a new model for a specific ticker and timeframe"
          }
        },
        {
          "name": "Train Universal Models",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"timeframes\": [\"1d\", \"1w\", \"1mo\"],\n    \"tickers\": [\"AAPL\", \"MSFT\", \"GOOGL\", \"AMZN\", \"META\"]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/models/train-universal/",
              "host": ["{{baseUrl}}"],
              "path": ["models", "train-universal", ""]
            },
            "description": "Train universal models for multiple tickers and timeframes"
          }
        },
        {
          "name": "List Models",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/models/list/",
              "host": ["{{baseUrl}}"],
              "path": ["models", "list", ""]
            },
            "description": "List all available models with their metrics"
          }
        },
        {
          "name": "Delete Model",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"ticker\": \"AAPL\",\n    \"timeframe\": \"1d\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/models/delete/",
              "host": ["{{baseUrl}}"],
              "path": ["models", "delete", ""]
            },
            "description": "Delete a specific model (requires authentication)"
          }
        },
        {
          "name": "Create Test Models",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/models/create-test/",
              "host": ["{{baseUrl}}"],
              "path": ["models", "create-test", ""]
            },
            "description": "Create dummy models for testing"
          }
        }
      ]
    },
    {
      "name": "üíº Trading Endpoints",
      "item": [
        {
          "name": "Simulate Trade",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"ticker\": \"AAPL\",\n    \"action\": \"buy\",\n    \"quantity\": 10,\n    \"order_type\": \"market\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/trading/simulate/",
              "host": ["{{baseUrl}}"],
              "path": ["trading", "simulate", ""]
            },
            "description": "Simulate a trade (paper trading)"
          }
        },
        {
          "name": "Get Portfolio",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/trading/portfolio/",
              "host": ["{{baseUrl}}"],
              "path": ["trading", "portfolio", ""]
            },
            "description": "Get user's simulated portfolio"
          }
        },
        {
          "name": "Get Trade History",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/trading/history/?page=1&per_page=20",
              "host": ["{{baseUrl}}"],
              "path": ["trading", "history", ""],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "per_page",
                  "value": "20"
                }
              ]
            },
            "description": "Get user's trade history"
          }
        },
        {
          "name": "Place Real Trade (Placeholder)",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"ticker\": \"AAPL\",\n    \"action\": \"buy\",\n    \"quantity\": 10\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/trading/real/",
              "host": ["{{baseUrl}}"],
              "path": ["trading", "real", ""]
            },
            "description": "Place real trade (placeholder - not implemented)"
          }
        }
      ]
    },
    {
      "name": "üëÅÔ∏è Watchlist Endpoints",
      "item": [
        {
          "name": "Create Watchlist",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"Tech Stocks\",\n    \"tickers\": [\"AAPL\", \"MSFT\", \"GOOGL\", \"AMZN\"]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/watchlist/create/",
              "host": ["{{baseUrl}}"],
              "path": ["watchlist", "create", ""]
            },
            "description": "Create or update user's watchlist"
          }
        },
        {
          "name": "Get Watchlist Predictions",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/watchlist/predictions/?name=Tech Stocks&timeframe=1d",
              "host": ["{{baseUrl}}"],
              "path": ["watchlist", "predictions", ""],
              "query": [
                {
                  "key": "name",
                  "value": "Tech Stocks"
                },
                {
                  "key": "timeframe",
                  "value": "1d"
                }
              ]
            },
            "description": "Get predictions for all tickers in watchlist"
          }
        }
      ]
    },
    {
      "name": "üìä Market Data",
      "item": [
        {
          "name": "Market Overview",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/market/overview/",
              "host": ["{{baseUrl}}"],
              "path": ["market", "overview", ""]
            },
            "description": "Get overall market overview and top movers"
          }
        },
        {
          "name": "Analytics Dashboard",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/market/analytics/",
              "host": ["{{baseUrl}}"],
              "path": ["market", "analytics", ""]
            },
            "description": "Get analytics and performance metrics"
          }
        },
        {
          "name": "Model Performance",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/market/performance/?timeframe=1d",
              "host": ["{{baseUrl}}"],
              "path": ["market", "performance", ""],
              "query": [
                {
                  "key": "timeframe",
                  "value": "1d"
                }
              ]
            },
            "description": "Get detailed model performance metrics"
          }
        },
        {
          "name": "Get Chart Data",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/market/chart/AAPL/?timeframe=1mo&chart_type=candlestick&indicators=sma20,rsi",
              "host": ["{{baseUrl}}"],
              "path": ["market", "chart", "AAPL", ""],
              "query": [
                {
                  "key": "timeframe",
                  "value": "1mo"
                },
                {
                  "key": "chart_type",
                  "value": "candlestick"
                },
                {
                  "key": "indicators",
                  "value": "sma20,rsi"
                }
              ]
            },
            "description": "Get historical stock data for charting"
          }
        },
        {
          "name": "Multi-Chart Data",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"tickers\": [\"AAPL\", \"MSFT\", \"GOOGL\"],\n    \"timeframe\": \"1mo\",\n    \"chart_type\": \"line\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/market/chart/multi/",
              "host": ["{{baseUrl}}"],
              "path": ["market", "chart", "multi", ""]
            },
            "description": "Get chart data for multiple tickers comparison"
          }
        }
      ]
    },
    {
      "name": "üß™ System Monitoring",
      "item": [
        {
          "name": "System Health",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/system/health/",
              "host": ["{{baseUrl}}"],
              "path": ["system", "health", ""]
            },
            "description": "Comprehensive system health check"
          }
        },
        {
          "name": "Memory Status",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/system/memory/",
              "host": ["{{baseUrl}}"],
              "path": ["system", "memory", ""]
            },
            "description": "Monitor memory usage and system resources"
          }
        },
        {
          "name": "Redis Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/system/redis/",
              "host": ["{{baseUrl}}"],
              "path": ["system", "redis", ""]
            },
            "description": "Test Redis connectivity"
          }
        },
        {
          "name": "Debug Models",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/system/debug/models/",
              "host": ["{{baseUrl}}"],
              "path": ["system", "debug", "models", ""]
            },
            "description": "Debug endpoint to check model status"
          }
        }
      ]
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{authToken}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set common variables",
          "pm.globals.set('timestamp', new Date().toISOString());"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Common test scripts",
          "pm.test('Status code is successful', function () {",
          "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
          "});",
          "",
          "pm.test('Response time is acceptable', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "if (pm.response.headers.get('Content-Type').includes('application/json')) {",
          "    pm.test('Response is valid JSON', function () {",
          "        pm.response.to.have.jsonBody();",
          "    });",
          "}"
        ]
      }
    }
  ]
}
