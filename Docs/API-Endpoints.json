{
  "info": {
    "_postman_id": "stock-vibe-predictor-api-v2",
    "name": "StockVibePredictor API v2.0",
    "description": "Enhanced API collection with advanced features, environments, and comprehensive testing",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Enhanced pre-request script",
          "pm.globals.set('timestamp', new Date().toISOString());",
          "pm.globals.set('requestId', pm.variables.replaceIn('{{$guid}}'));",
          "",
          "// Auto-refresh auth token if expired",
          "if (pm.globals.get('tokenExpiry') && new Date() > new Date(pm.globals.get('tokenExpiry'))) {",
          "    console.log('Token expired, refreshing...');",
          "    // Add token refresh logic here",
          "}",
          "",
          "// Set user agent",
          "pm.request.headers.add({",
          "    key: 'User-Agent',",
          "    value: 'StockVibe-Postman-Client/2.0'",
          "});"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Enhanced global test scripts",
          "pm.test('Response time is acceptable', function () {",
          "    const responseTime = pm.response.responseTime;",
          "    pm.expect(responseTime).to.be.below(5000);",
          "    ",
          "    // Log performance",
          "    console.log(`Response time: ${responseTime}ms`);",
          "});",
          "",
          "pm.test('Status code is successful', function () {",
          "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
          "});",
          "",
          "pm.test('Headers contain required fields', function () {",
          "    pm.expect(pm.response.headers.has('Content-Type')).to.be.true;",
          "});",
          "",
          "if (pm.response.headers.get('Content-Type').includes('application/json')) {",
          "    pm.test('Response is valid JSON', function () {",
          "        pm.response.to.have.jsonBody();",
          "    });",
          "    ",
          "    pm.test('Response contains timestamp', function () {",
          "        const jsonData = pm.response.json();",
          "        pm.expect(jsonData).to.have.property('timestamp');",
          "    });",
          "}"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "{{protocol}}://{{host}}:{{port}}/api/v1",
      "type": "string"
    },
    {
      "key": "protocol",
      "value": "http",
      "type": "string"
    },
    {
      "key": "host",
      "value": "localhost",
      "type": "string"
    },
    {
      "key": "port",
      "value": "8000",
      "type": "string"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{authToken}}",
        "type": "string"
      }
    ]
  },
  "item": [
    {
      "name": "🔐 Authentication",
      "item": [
        {
          "name": "Get Auth Token",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/token/",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "token", ""]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const jsonData = pm.response.json();",
                  "    pm.globals.set('authToken', jsonData.access_token);",
                  "    pm.globals.set('refreshToken', jsonData.refresh_token);",
                  "    ",
                  "    // Calculate expiry time",
                  "    const expiry = new Date();",
                  "    expiry.setSeconds(expiry.getSeconds() + jsonData.expires_in);",
                  "    pm.globals.set('tokenExpiry', expiry.toISOString());",
                  "    ",
                  "    pm.test('Token received', function () {",
                  "        pm.expect(jsonData.access_token).to.be.a('string');",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "📈 Advanced Predictions",
      "item": [
        {
          "name": "Enhanced Multi-Timeframe Prediction",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Request-ID",
                "value": "{{requestId}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"ticker\": \"{{testTicker}}\",\n    \"timeframes\": [\"1d\", \"1w\", \"1mo\", \"1y\"],\n    \"include_analysis\": true,\n    \"confidence_threshold\": 0.7,\n    \"include_technical_indicators\": true,\n    \"risk_analysis\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/predict/multi-timeframe/",
              "host": ["{{baseUrl}}"],
              "path": ["predict", "multi-timeframe", ""]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Multi-timeframe prediction successful', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('predictions');",
                  "    pm.expect(jsonData).to.have.property('analysis');",
                  "    pm.expect(jsonData).to.have.property('metadata');",
                  "});",
                  "",
                  "pm.test('Predictions contain required fields', function () {",
                  "    const predictions = pm.response.json().predictions;",
                  "    Object.keys(predictions).forEach(timeframe => {",
                  "        pm.expect(predictions[timeframe]).to.have.property('direction');",
                  "        pm.expect(predictions[timeframe]).to.have.property('confidence');",
                  "        pm.expect(predictions[timeframe]).to.have.property('price_target');",
                  "    });",
                  "});",
                  "",
                  "// Store prediction for comparison",
                  "if (pm.response.code === 200) {",
                  "    const result = pm.response.json();",
                  "    pm.globals.set('lastPrediction', JSON.stringify(result.predictions));",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Real-time Batch Predictions",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"tickers\": [\"AAPL\", \"MSFT\", \"GOOGL\", \"AMZN\", \"TSLA\"],\n    \"timeframe\": \"1d\",\n    \"parallel_processing\": true,\n    \"include_market_context\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/predict/batch/",
              "host": ["{{baseUrl}}"],
              "path": ["predict", "batch", ""]
            }
          }
        }
      ]
    },
    {
      "name": "📊 Enhanced Market Data",
      "item": [
        {
          "name": "Advanced Chart Data with Indicators",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/market/chart/{{testTicker}}/?timeframe=3mo&chart_type=candlestick&indicators=sma20,sma50,rsi,macd,bollinger&volume=true",
              "host": ["{{baseUrl}}"],
              "path": ["market", "chart", "{{testTicker}}", ""],
              "query": [
                {
                  "key": "timeframe",
                  "value": "3mo"
                },
                {
                  "key": "chart_type",
                  "value": "candlestick"
                },
                {
                  "key": "indicators",
                  "value": "sma20,sma50,rsi,macd,bollinger"
                },
                {
                  "key": "volume",
                  "value": "true"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('Chart data structure is valid', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('data');",
                  "    pm.expect(jsonData).to.have.property('indicators');",
                  "    pm.expect(jsonData).to.have.property('summary');",
                  "    pm.expect(jsonData.data).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Technical indicators included', function () {",
                  "    const indicators = pm.response.json().indicators;",
                  "    pm.expect(Object.keys(indicators).length).to.be.greaterThan(0);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Market Sentiment Analysis",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/market/sentiment/?sectors=technology,finance,healthcare&timeframe=1d",
              "host": ["{{baseUrl}}"],
              "path": ["market", "sentiment", ""],
              "query": [
                {
                  "key": "sectors",
                  "value": "technology,finance,healthcare"
                },
                {
                  "key": "timeframe",
                  "value": "1d"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "🤖 Advanced Model Management",
      "item": [
        {
          "name": "Model Performance Analytics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/models/performance/?model_type=universal&timeframe=all&metrics=accuracy,precision,recall,f1",
              "host": ["{{baseUrl}}"],
              "path": ["models", "performance", ""],
              "query": [
                {
                  "key": "model_type",
                  "value": "universal"
                },
                {
                  "key": "timeframe",
                  "value": "all"
                },
                {
                  "key": "metrics",
                  "value": "accuracy,precision,recall,f1"
                }
              ]
            }
          }
        },
        {
          "name": "Auto-Retrain Models",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"schedule\": \"daily\",\n    \"performance_threshold\": 0.65,\n    \"retrain_conditions\": {\n        \"accuracy_drop\": 0.05,\n        \"data_age_days\": 30\n    },\n    \"notification_webhook\": \"https://your-webhook-url.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/models/auto-retrain/",
              "host": ["{{baseUrl}}"],
              "path": ["models", "auto-retrain", ""]
            }
          }
        }
      ]
    },
    {
      "name": "📱 Mobile & WebSocket Endpoints",
      "item": [
        {
          "name": "Mobile-Optimized Predictions",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Client-Type",
                "value": "mobile"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"ticker\": \"{{testTicker}}\",\n    \"timeframes\": [\"1d\", \"1w\"],\n    \"mobile_optimized\": true,\n    \"data_compression\": true,\n    \"battery_conscious\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/predict/mobile/",
              "host": ["{{baseUrl}}"],
              "path": ["predict", "mobile", ""]
            }
          }
        }
      ]
    },
    {
      "name": "🔧 Advanced System Monitoring",
      "item": [
        {
          "name": "Comprehensive Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/system/health/?detailed=true&include_performance=true",
              "host": ["{{baseUrl}}"],
              "path": ["system", "health", ""],
              "query": [
                {
                  "key": "detailed",
                  "value": "true"
                },
                {
                  "key": "include_performance",
                  "value": "true"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "pm.test('System is healthy', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.be.oneOf(['healthy', 'degraded']);",
                  "});",
                  "",
                  "pm.test('All critical services operational', function () {",
                  "    const services = pm.response.json().services;",
                  "    pm.expect(services.cache).to.not.equal('unhealthy');",
                  "    pm.expect(services.models).to.not.equal('unhealthy');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Performance Metrics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/system/metrics/?period=24h&granularity=1h",
              "host": ["{{baseUrl}}"],
              "path": ["system", "metrics", ""],
              "query": [
                {
                  "key": "period",
                  "value": "24h"
                },
                {
                  "key": "granularity",
                  "value": "1h"
                }
              ]
            }
          }
        }
      ]
    }
  ]
}
